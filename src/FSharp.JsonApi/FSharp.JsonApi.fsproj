<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
    <Description>Use F# to create and consume flexible, strongly typed web APIs following the JSON-API specification.</Description>
    <PackageProjectUrl>https://github.com/cmeeren/FSharp.JsonApi</PackageProjectUrl>
    <Authors>Christer van der Meeren</Authors>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageTags>f# fsharp jsonapi json-api api rest rest-api api-rest api-server api-client web-api asp-net-core aspnetcore giraffe</PackageTags>
    <Version>2.0.0-alpha-09</Version>
    <PackageReleaseNotes>- Breaking: Removed SimpleResource and related methods/extensions on JsonApiContext. Use Resource.attributesOrDefault and Resource.relationshipsOrDefault instead to get a (possibly default) attribute/relationship instance from a resource.
- Breaking: Added RequestDocumentError.UnknownMainResourceType
- Breaking: JsonApiContext.GetResource and the JsonApiContext.Parse overload returning a resource discriminator now return errors if the resource type is unknown. The signature of the former method is changed; the latter is a behaviour change only.
- Breaking: Renamed Query to QueryParser, added static methods to create an instance with a query parameter map or HttpContext, and changed most methods to instance members that do not depend on a query parameter map or HttpContext
- Breaking: JsonApiContext.create now throws on invalid attribute and relationship names. Use the new AllowIllegalNameAttribute to disable the check for specific attributes/relationships.
- Added Setter type with helper methods to chain and lift normal "immutable setter" functions to accept parsed, possibly optional arguments, combining any errors
- Added JsonApiContext methods RequireResource, WithAllReadOnly, ToDiscriminator, FromDiscriminator, and SerializeAndGetBytes
- Added JsonApiContext overloads for ParseRequired, WithReadOnly, WithWriteOnly, and WithNotNull
- Added async overloads for ResourceBuildContext methods GetAttribute and GetExplicitAttribute
- Fixed Uri.addQuery and Uri.setQuery not behaving correctly for multiple identical query keys and for query keys that only differ by case
- Fixed validation when links collection is null (JSON: "links": null)
- Serializes Uri's to canonical format using Uri.ToString() instead of Uri.OriginalString which is normally used by Newtonsoft.Json
- Made order of included resources deterministic (needed to get stable hashes of response for ETag)</PackageReleaseNotes>
  </PropertyGroup>
  <PropertyGroup>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <WarningsAsErrors />
  </PropertyGroup>
  <ItemGroup>
    <None Include="paket.references" />
    <Compile Include="AssemblyInfo.fs" />
    <Compile Include="Utils.fs" />
    <Compile Include="Helpers.fs" />
    <Compile Include="MediaTypes.fs" />
    <Compile Include="CommonTypes.fs" />
    <Compile Include="DocumentTypes.fs" />
    <Compile Include="ResourceBuilder.fs" />
    <Compile Include="ResourceBuildContext.fs" />
    <Compile Include="Validation.fs" />
    <Compile Include="Serialization.fs" />
    <Compile Include="JsonApiContext.fs" />
    <Compile Include="QueryParser.fs" />
    <Compile Include="Request.fs" />
    <Compile Include="Attribute.fs" />
    <Compile Include="Attribute2.fs" />
    <Compile Include="Relationship.fs" />
    <Compile Include="Setter.fs" />
  </ItemGroup>
  <Import Project="..\..\.paket\Paket.Restore.targets" />
</Project>